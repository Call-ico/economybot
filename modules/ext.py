import aiosqlite
import aiohttp
from typing import Optional, Any, Tuple
from modules.config import TOKEN, APPLICATION_ID
from datetime import datetime
import pytz
import asyncio

VOICE_CHANNEL_ID = 1399452236354027570  # I     D –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ç–æ–ø–∞
MESSAGE_ID_FILE = "voice_leaderboard_message_id.txt"


class Database:
    def __init__(self, db_name: str):
        self.db_name = db_name

    @staticmethod
    async def _fetch(cursor: aiosqlite.Cursor, mode: str) -> Optional[Any]:
        if mode == "one":
            return await cursor.fetchone()
        if mode == "many":
            return await cursor.fetchmany()
        if mode == "all":
            return await cursor.fetchall()

        return None

    async def connect(self) -> aiosqlite.Connection:
        """
        creates a new connection to the database.
        """

        return await aiosqlite.connect(self.db_name)

    async def execute(
        self, query: str, values: Tuple = (), *, fetch: str = None, commit: bool = False,
        conn: aiosqlite.Connection = None
    ) -> Optional[Any]:
        """
        runs the query without committing any changes to the database if `commit` is not passed at func call.

        Tip: use this method for fetching like:`SELECT` queries.

        :param query: SQL query.
        :param values: values to be passed to the query.
        :param fetch: Takes ('one', 'many', 'all').
        :param commit: Commits the changes to the database if it's set to `True`.
        :param conn: pass the new connection to execute two or more methods. If passed, you've to close it manually.
        :return: required data.
        """

        bypass = conn
        conn = await self.connect() if conn is None else conn
        cursor = await conn.cursor()

        await cursor.execute(query, values)
        if fetch is not None:
            data = await self._fetch(cursor, fetch)
        else:
            data = None

        if commit:
            await conn.commit()

        await cursor.close()
        if bypass is None:
            await conn.close()

        return data

    async def run(self, query: str, values: Tuple = (), *, conn: aiosqlite.Connection = None) -> None:
        """
        runs the query and commits any changes to the database directly.

        Tip: use this method if you want to commit changes to the database. Like: `CREATE, UPDATE, INSERT, DELETE`, etc.

        :param query: SQL query
        :param values: values to be passed to the query.
        :param conn: pass the new connection to execute two or more methods. If passed, you've to close it manually.
        """

        await self.execute(query, values, commit=True, conn=conn)


def format_time(minutes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    hours = minutes // 60
    mins = minutes % 60
    if hours > 0:
        return f"{hours} —á., {mins} –º–∏–Ω."
    else:
        return f"{mins} –º–∏–Ω."


def get_medal_emoji(position):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
    medals = {
        1: "ü•á",
        2: "ü•à", 
        3: "ü•â"
    }
    return medals.get(position, "üëë")


def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)


async def send_or_update_voice_leaderboard_message(top_data, message_id=None):
    """
    top_data: list of dicts: [{"name": str, "minutes": int, "gold": int}]
    message_id: str or None
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ú–°–ö
    moscow_time = get_moscow_time()
    current_date = moscow_time.strftime("%d.%m.%Y")
    current_timestamp = int(moscow_time.timestamp())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = f"üéôÔ∏è **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –∑–∞ {current_date}** üéôÔ∏è"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    leaderboard_lines = []
    for i, user in enumerate(top_data, 1):
        medal = get_medal_emoji(i)
        time_str = format_time(user['minutes'])
        gold_amount = user['gold']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –µ—Å—Ç—å (–æ–Ω–æ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç mention –∏–ª–∏ display_name)
        user_mention = user['name']
        
        line = f"\n{medal} #{i}. **{user_mention}** ‚Äî {time_str} (+{gold_amount} <:mp:1155562128544108614>)"
        leaderboard_lines.append(line)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    description = title + "".join(leaderboard_lines) + f"\n\n‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ**: <t:{current_timestamp}:R>"
    
    # –°–æ–∑–¥–∞–µ–º embed —Å —Å–µ—Ä–æ–π –æ–±–≤–æ–¥–∫–æ–π
    embed = {
        "title": "",
        "description": description,
        "color": 0x2F3136,  # Discord dark grey
        "type": "rich"
    }
    
    # –ö–Ω–æ–ø–∫–∏
    components = [
        {
            "type": 1,  # ActionRow
            "components": [
                {"type": 2, "style": 2, "label": "–ú–∞–≥–∞–∑–∏–Ω", "custom_id": "shop"},
                {"type": 2, "style": 2, "label": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "custom_id": "fun"},
                {"type": 2, "style": 2, "label": "–¢–æ–ø", "custom_id": "top"}
            ]
        }
    ]
    
    headers = {
        "Authorization": f"Bot {TOKEN}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "embeds": [embed],
        "components": components
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            if message_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                url = f"https://discord.com/api/v10/channels/{VOICE_CHANNEL_ID}/messages/{message_id}"
                async with session.patch(url, headers=headers, json=payload) as response:
                    if response.status == 404:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        url = f"https://discord.com/api/v10/channels/{VOICE_CHANNEL_ID}/messages"
                        async with session.post(url, headers=headers, json=payload) as new_response:
                            if new_response.status in [200, 201]:
                                data = await new_response.json()
                                return data["id"]
                            else:
                                error_text = await new_response.text()
                                print(f"Discord API error (new message): {new_response.status} {error_text}")
                                return None
                    elif response.status == 200:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                        data = await response.json()
                        return data["id"]
                    else:
                        error_text = await response.text()
                        print(f"Discord API error (update): {response.status} {error_text}")
                        return None
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                url = f"https://discord.com/api/v10/channels/{VOICE_CHANNEL_ID}/messages"
                async with session.post(url, headers=headers, json=payload) as response:
                    if response.status in [200, 201]:
                        data = await response.json()
                        return data["id"]
                    else:
                        error_text = await response.text()
                        print(f"Discord API error (create): {response.status} {error_text}")
                        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Discord: {e}")
        return None