from modules.ext import Database

import aiosqlite
import discord

from typing import Union, List, Any, Optional

__all__ = [
    "Inventory"
]

TABLE_NAME = "inventory"  # Enter the table name here (tip:- use only lowercase letters)

shop_items = [
    {"name": "<:cs:1397687842779435068> –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Å", "cost": 100, "id": 1, "info": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ö–∞–ª—è–≤–∞)"},
    {"name": "<:color:1397688917083291709> —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ —Ä–æ–ª–∏", "cost": 15750, "id": 2, "info": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –≤–∞—à–µ–π —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"},
    {"name": "<:BTNSilence:1398024524330434773> –∞–Ω–º—É—Ç", "cost": 18500, "id": 3, "info": "–°–Ω—è—Ç—å –º—É—Ç —Å —Å–µ–±—è –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"},
    {"name": "<:unban:1397687712051368067> —Ä–∞–∑–±–∞–Ω —Å –∫–ª–æ–∑–æ–≤", "cost": 22599, "id": 4, "info": "–†–∞–∑–±–∞–Ω –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä–∞—Ö"},
    {"name": "<:role:1397687938099318906> –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏", "cost": 39999, "id": 5, "info": "–ü–æ–ª—É—á–∏—Ç—å –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ (+1 –¥–æ—Å—Ç—É–ø –∑–∞ –ø–æ–∫—É–ø–∫—É)"},
    {"name": "<:private:1397687676370681956> –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", "cost": 50000, "id": 6, "info": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É"},
    {"name": "<:zvuk:1397688038712283197> —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞", "cost": 68999, "id": 7, "info": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ"},
    {"name": "<:update:1396934490944962581> —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–æ–ª—å", "cost": 79999, "id": 8, "info": "–†–æ–ª—å –æ—Ç Bandit –¥–æ Old Man, –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ +1"},
    {"name": "<:BTNAdvancedUnholyArmor:1402048051404869702> –õ–∞–¥–¥–µ—Ä –∞—Ä–º–æ—Ä 14 –¥–Ω–µ–π", "cost": 105000, "id": 9, "info": "–õ–∞–¥–¥–µ—Ä –∞—Ä–º–æ—Ä –Ω–∞ 14 –¥–Ω–µ–π"},
    {"name": "<:bonus:1402048692495585300> –õ–∞–¥–¥–µ—Ä –±–æ–Ω—É—Å 14 –¥–Ω–µ–π", "cost": 115000, "id": 10, "info": "–õ–∞–¥–¥–µ—Ä –±–æ–Ω—É—Å –Ω–∞ 14 –¥–Ω–µ–π"},
    {"name": "<:proakk7:1397688074343026708> –ø—Ä–æ –∞–∫–∫ 7 –¥–Ω–µ–π", "cost": 95000, "id": 11, "info": "–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 7 –¥–Ω–µ–π"},
    {"name": "<:proakk14:1397688101073195090> –ø—Ä–æ –∞–∫–∫ 14 –¥–Ω–µ–π", "cost": 135000, "id": 12, "info": "–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 14 –¥–Ω–µ–π"},
    {"name": "<:proakk30:1397688130051637329> –ø—Ä–æ –∞–∫–∫ 30 –¥–Ω–µ–π", "cost": 159000, "id": 13, "info": "–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 30 –¥–Ω–µ–π"},
    {"name": "<:pack30:1397687531935371435> —Å—É–ø–µ—Ä –ø–∞–∫ 30 –¥–Ω–µ–π", "cost": 199999, "id": 14, "info": "–°—É–ø–µ—Ä –ø–∞–∫–µ—Ç: –ª–∞–¥–¥–µ—Ä –±–æ–Ω—É—Å –∏ –∞—Ä–º–æ—Ä"},
    {"name": "<:sff:1396933372466692196> Shadow Fiend", "cost": 215999, "id": 15, "info": "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å Shadow Fiend —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏. –ü—Ä–∏–Ω–æ—Å–∏—Ç 30 –æ—á–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."},
    {"name": "<:necr:1396933406578708591> Necromancer", "cost": 275999, "id": 16, "info": "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å Necromancer —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏. –ü—Ä–∏–Ω–æ—Å–∏—Ç 30 –æ—á–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."},
    {"name": "<:majority:1396935174813520135> Majority", "cost": 375999, "id": 17, "info": "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å Majority —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏. –ü—Ä–∏–Ω–æ—Å–∏—Ç 30 –æ—á–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."},
    {"name": "<:royal:1398027190532309134> Royal Crown", "cost": 425999, "id": 18, "info": "–≠–ª–∏—Ç–Ω–∞—è —Ä–æ–ª—å Royal Crown —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏."},
    {"name": "<:customerole:1397688173001310260> –°–≤–æ—è —Ä–æ–ª—å", "cost": 750000, "id": 19, "info": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ä–æ–ª–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –æ—Å–æ–±—ã–º–∏ –¥–æ—Å—Ç—É–ø–∞–º–∏, –º–æ–∂–Ω–æ –∏–º—è —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"},
    {"name": "<:aegis:1397687748869095495> 1 –∞–µ–≥–∏—Å", "cost": 2000, "id": 20, "info": "–û–±–º–µ–Ω—è–π—Ç–µ 1000 <:gold:1396897616729735299> –Ω–∞ 1 –∫—É–ø–æ–Ω –¥–ª—è —Å—É–Ω–¥—É–∫–∞ (–∞–µ–≥–∏—Å)"},
    {"name": "<:68:1396933324789776484> –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã", "cost": 20000, "id": 21, "info": "–î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–µ—Å—É —Ñ–æ—Ä—Ç—É–Ω—ã (10 –∞–µ–≥–∏—Å–æ–≤)"},
    {"name": "<:tittle:1397687623845417030> —Ç–∏—Ç—É–ª –Ω–∞ —Å–∞–π—Ç–µ (—Å–µ–∑–æ–Ω)", "cost": 129999, "id": 22, "info": "–ü–æ–ª—É—á–∏—Ç–µ —Ç–∏—Ç—É–ª –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω"},
    {"name": "<:tittle:1397687623845417030> —Ç–∏—Ç—É–ª –Ω–∞ —Å–∞–π—Ç–µ (–Ω–∞–≤—Å–µ–≥–¥–∞)", "cost": 399999, "id": 23, "info": "–ü–æ–ª—É—á–∏—Ç–µ —Ç–∏—Ç—É–ª –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"},
    {"name": "üá™üá∫ EU —Ñ–ª–∞–≥", "cost": 999999, "id": 24, "info": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π EU —Ñ–ª–∞–≥"}

]

item_names = [item["name"] for item in shop_items]


class Inventory:
    def __init__(self, database: Database):
        self._db = database

    @property
    def shop_items(self) -> List:
        return shop_items

    async def create_table(self) -> None:
        conn = await self._db.connect()
        await self._db.run(f"CREATE TABLE IF NOT EXISTS `{TABLE_NAME}`(userID BIGINT)", conn=conn)
        for col in item_names:
            try:
                await self._db.run(
                    f"ALTER TABLE `{TABLE_NAME}` ADD COLUMN `{col}` INTEGER DEFAULT 0",
                    conn=conn
                )
            except aiosqlite.OperationalError:
                pass

        await conn.close()

    async def open_acc(self, user: discord.Member) -> None:
        conn = await self._db.connect()
        data = await self._db.execute(
            f"SELECT * FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one", conn=conn
        )
        if data is None:
            await self._db.run(
                f"INSERT INTO `{TABLE_NAME}`(userID) VALUES(?)",
                (user.id,), conn=conn
            )

        await conn.close()

    async def get_acc(self, user: discord.Member) -> Optional[Any]:
        users = await self._db.execute(
            f"SELECT * FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one"
        )
        return users

    async def update_acc(
        self, user: discord.Member, amount: int, mode: str
    ) -> Optional[Any]:
        conn = await self._db.connect()
        data = await self._db.execute(
            f"SELECT * FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one", conn=conn
        )
        if data is not None:
            await self._db.run(
                f"UPDATE `{TABLE_NAME}` SET `{mode}` = `{mode}` + ? WHERE userID = ?",
                (amount, user.id), conn=conn
            )

        users = await self._db.execute(
            f"SELECT `{mode}` FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one", conn=conn
        )

        await conn.close()
        return users

    async def change_acc(self, user: discord.Member, amount: Union[int, None], mode: str) -> Optional[Any]:
        conn = await self._db.connect()
        data = await self._db.execute(
            f"SELECT * FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one", conn=conn)
        if data is not None:
            await self._db.run(
                f"UPDATE `{TABLE_NAME}` SET `{mode}` = ? WHERE userID = ?",
                (amount, user.id), conn=conn
            )

        users = await self._db.execute(
            f"SELECT `{mode}` FROM `{TABLE_NAME}` WHERE userID = ?",
            (user.id,), fetch="one", conn=conn
        )

        await conn.close()
        return users
