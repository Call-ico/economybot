
from base import EconomyBot
import discord
import discord.ui

from discord.ext import commands
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import io
from discord import app_commands

# --- View –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∞–º–∏ ---
class PurchaseActionView(discord.ui.View):
    def __init__(self, user_id, item_name, item_cost, bot, inv, bank, thread, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user_id = user_id
        self.item_name = item_name
        self.item_cost = item_cost
        self.bot = bot
        self.inv = inv
        self.bank = bank
        self.thread = thread

    @discord.ui.button(label="–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", style=discord.ButtonStyle.primary, custom_id="in_dev")
    async def in_dev(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.guild.get_member(self.user_id)
        if not user:
            await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        await self.inv.update_acc(user, -1, self.item_name)
        await self.thread.send(f"üîß –ü—Ä–µ–¥–º–µ—Ç **{self.item_name}** —É {user.mention} –≤–∑—è—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É {interaction.user.mention} ({interaction.user})\n‚è∞ <t:{int(datetime.utcnow().timestamp())}:f>")
        await interaction.response.send_message(f"–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'.", ephemeral=True)

    @discord.ui.button(label="–í—ã–¥–∞–Ω–æ", style=discord.ButtonStyle.success, custom_id="issued")
    async def issued(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.guild.get_member(self.user_id)
        await self.thread.send(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç **{self.item_name}** –≤—ã–¥–∞–Ω {user.mention} {interaction.user.mention} ({interaction.user})\n‚è∞ <t:{int(datetime.utcnow().timestamp())}:f>")
        await interaction.response.send_message(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ '–í—ã–¥–∞–Ω–æ'.", ephemeral=True)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", style=discord.ButtonStyle.danger, custom_id="declined")
    async def declined(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.guild.get_member(self.user_id)
        if not user:
            await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        await self.inv.update_acc(user, -1, self.item_name)
        await self.bank.update_acc(user, +self.item_cost)
        await self.thread.send(f"‚ùå –ü–æ–∫—É–ø–∫–∞ **{self.item_name}** —É {user.mention} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {interaction.user.mention} ({interaction.user})\nüí∏ –í–æ–∑–≤—Ä–∞—Ç: {self.item_cost:,} <:gold:1396929958965940286>\n‚è∞ <t:{int(datetime.utcnow().timestamp())}:f>")
        await interaction.response.send_message(f"–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—ë–Ω –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", ephemeral=True)


class Inventory(commands.Cog):
    def __init__(self, client: EconomyBot):
        self.client = client
        self.inv = self.client.db.inv
        self.bank = self.client.db.bank

    def create_receipt_image(self, item_name, item_cost, username, balance=None):
        from datetime import datetime, timedelta, timezone
        import pytz
        img = Image.new('RGBA', (400, 190), (30, 30, 30, 255))
        draw = ImageDraw.Draw(img)
        try:
            font = ImageFont.truetype('arial.ttf', 24)
            small_font = ImageFont.truetype('arial.ttf', 16)
        except Exception:
            font = ImageFont.load_default()
            small_font = ImageFont.load_default()
        draw.rectangle([0, 0, 399, 189], outline=(80, 80, 80), width=2)
        draw.text((20, 10), "–ß–ï–ö –û –ü–û–ö–£–ü–ö–ï", font=font, fill=(255, 215, 0))
        draw.text((20, 45), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}", font=small_font, fill=(200, 200, 200))
        clean_name = item_name.split(' ', 1)[-1]
        draw.text((20, 70), f"–¢–æ–≤–∞—Ä: {clean_name}", font=small_font, fill=(255, 255, 255))
        draw.text((20, 95), f"–°—É–º–º–∞: {item_cost} ", font=small_font, fill=(255, 255, 255))
        if balance is not None:
            draw.text((20, 115), f"–û—Å—Ç–∞—Ç–æ–∫: {balance}", font=small_font, fill=(255, 255, 255))
        try:
            gold = Image.open('assets/gold.png').resize((20, 20))
            img.paste(gold, (120, 92), gold)
        except Exception:
            pass
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        try:
            import pytz
            tz = pytz.timezone('Europe/Moscow')
            now = datetime.now(tz)
        except Exception:
            now = datetime.utcnow() + timedelta(hours=3)
        time_str = now.strftime('%d.%m.%Y %H:%M:%S')
        draw.text((20, 150), f"–í—Ä–µ–º—è (–ú–°–ö): {time_str}", font=small_font, fill=(180, 180, 180))
        draw.text((20, 170), "–ë–∞–Ω–∫–∏—Ä: iCCup Bot", font=small_font, fill=(120, 180, 255))
        buf = io.BytesIO()
        img.save(buf, format='PNG')
        buf.seek(0)
        return buf

    async def show_inventory(self, interaction: discord.Interaction, member: discord.Member = None):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        user = member or interaction.user
        user_av = user.display_avatar or user.default_avatar
        if user.bot:
            await interaction.response.send_message("–£ –±–æ—Ç–æ–≤ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", ephemeral=True)
            return
        await self.inv.open_acc(user)
        em = discord.Embed(color=0x00ff00)
        x = 1
        for item in self.inv.shop_items:
            name = item["name"]
            item_id = item["id"]
            data = await self.inv.update_acc(user, 0, name)
            if data[0] >= 1:
                x += 1
                em.add_field(
                    name=f"{name.upper()} - {data[0]}", value=f"ID: {item_id}", inline=False)
        em.set_author(name=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {user.name}", icon_url=user_av.url)
        if x == 1:
            em.description = "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç—ã..."
        await interaction.response.send_message(embed=em)

    @app_commands.command(name="–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    async def inventory_slash(self, interaction: discord.Interaction, member: discord.Member = None):
        """–°–ª–µ—à-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        await self.show_inventory(interaction, member)

    @app_commands.command(name="–∫—É–ø–∏—Ç—å", description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID")
    @app_commands.describe(item_query="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –ø—Ä–µ–¥–º–µ—Ç–∞")
    @app_commands.checks.cooldown(1, 5, key=lambda i: i.user.id)
    async def buy_slash(self, interaction: discord.Interaction, item_query: str):
        user = interaction.user
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥–∏–ª—å–¥–∏–∏
        if not interaction.guild:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        await self.bank.open_acc(user)
        await self.inv.open_acc(user)
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ)
        item_query_clean = item_query.strip().lower()
        item = None
        if item_query_clean.isdigit():
            item_id = int(item_query_clean)
            for it in self.inv.shop_items:
                if it["id"] == item_id:
                    item = it
                    break
        if not item:
            for it in self.inv.shop_items:
                if item_query_clean == it["name"].strip().lower():
                    item = it
                    break
        if not item:
            await interaction.response.send_message(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ id `{item_query}`", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if item["cost"] < 0:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.", ephemeral=True)
            return
        users = await self.bank.get_acc(user)
        if users[1] < item["cost"]:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <:gold:1396929958965940286> –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item['name']}", ephemeral=True)
            return
        try:
            await self.inv.update_acc(user, +1, item["name"])
            await self.bank.update_acc(user, -item["cost"])
        except Exception as e:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", ephemeral=True)
            return
        users = await self.bank.get_acc(user)
        buf = self.create_receipt_image(item["name"], item["cost"], user.name, balance=users[1])
        file = discord.File(buf, filename="receipt.png")
        await interaction.response.send_message(file=file)
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞ –≤ —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª
        forum_channel_id = 1396619305763733686
        forum_channel = interaction.guild.get_channel(forum_channel_id)
        if forum_channel and hasattr(forum_channel, 'create_thread'):
            thread_title = f"–ü–æ–∫—É–ø–∫–∞: {item['name']} ({user.name})"
            log_content = f"""
**–ü–û–ö–£–ü–ö–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']:,} <:gold:1396929958965940286>
üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {users[1]:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
            """
            try:
                thread = await forum_channel.create_thread(name=thread_title, content=log_content)
                view = PurchaseActionView(user.id, item["name"], item["cost"], self.client, self.inv, self.bank, thread)
                await thread.send(f"–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–∫—É–ø–∫–æ–π:", view=view)
            except Exception as e:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ –ø–æ–∫—É–ø–∫–∏: {e}", ephemeral=True)
        else:
            try:
                log_content = f"""
**–ü–û–ö–£–ü–ö–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']:,} <:gold:1396929958965940286>
üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {users[1]:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
                """
                await forum_channel.send(log_content)
            except Exception as e:
                await interaction.followup.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª: {e}", ephemeral=True)
        # --- –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ ---
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å id —Ä–æ–ª–µ–π (–ø—Ä–∏–º–µ—Ä)
        role_ids = {
            "Shadow Fiend": 123456789012345678,  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ id —Ä–æ–ª–µ–π
            "Necromancer": 123456789012345679,
            "Majority": 123456789012345680,
            "Royal Crown": 123456789012345681,
            "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å": 123456789012345682,
        }
        role_name = item["name"].split(' ', 1)[-1]
        if role_name in role_ids:
            guild = interaction.guild
            role = guild.get_role(role_ids[role_name])
            if role:
                try:
                    await user.add_roles(role, reason="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    await interaction.followup.send(f"–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role.name}!", ephemeral=True)
                except Exception as e:
                    await interaction.followup.send(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏: {e}", ephemeral=True)
            else:
                await interaction.followup.send(f"–†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", ephemeral=True)

    @app_commands.command(name="–ø—Ä–æ–¥–∞—Ç—å", description="–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID")
    @app_commands.describe(item_query="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –ø—Ä–µ–¥–º–µ—Ç–∞")
    @app_commands.checks.cooldown(1, 5, key=lambda i: i.user.id)
    async def sell_slash(self, interaction: discord.Interaction, item_query: str):
        user = interaction.user
        if not interaction.guild:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        await self.bank.open_acc(user)
        await self.inv.open_acc(user)
        item_query_clean = item_query.strip().lower()
        item = None
        if item_query_clean.isdigit():
            item_id = int(item_query_clean)
            for it in self.inv.shop_items:
                if it["id"] == item_id:
                    item = it
                    break
        if not item:
            for it in self.inv.shop_items:
                if item_query_clean == it["name"].strip().lower():
                    item = it
                    break
        if not item:
            await interaction.response.send_message(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ id `{item_query}`", ephemeral=True)
            return
        quantity = await self.inv.update_acc(user, 0, item["name"])
        if quantity[0] < 1:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ—Ç {item['name']} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ", ephemeral=True)
            return
        cost = int(round(item["cost"] / 2, 0))
        if cost < 0:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.", ephemeral=True)
            return
        try:
            await self.inv.update_acc(user, -1, item["name"])
            await self.bank.update_acc(user, +cost)
        except Exception as e:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", ephemeral=True)
            return
        await interaction.response.send_message(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {item['name']} –∑–∞ {cost:,} <:gold:1396929958965940286>")
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª
        forum_channel_id = 1396619305763733686
        forum_channel = interaction.guild.get_channel(forum_channel_id)
        if forum_channel and hasattr(forum_channel, 'create_thread'):
            thread_title = f"–ü—Ä–æ–¥–∞–∂–∞: {item['name']} ({user.name})"
            log_content = f"""
**–ü–†–û–î–ê–ñ–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {cost:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
            """
            try:
                thread = await forum_channel.create_thread(name=thread_title, content=log_content)
            except Exception as e:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}", ephemeral=True)

    @commands.command(aliases=["inv"], usage="<—É—á–∞—Å—Ç–Ω–∏–∫: @—É—á–∞—Å—Ç–Ω–∏–∫>")
    @commands.guild_only()
    async def –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å(self, ctx, member: discord.Member = None):
        user = member or ctx.author
        user_av = user.display_avatar or user.default_avatar
        if user.bot:
            return await ctx.reply("–£ –±–æ—Ç–æ–≤ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", mention_author=False)
        await self.inv.open_acc(user)

        em = discord.Embed(color=0x00ff00)
        x = 1
        for item in self.inv.shop_items:
            name = item["name"]
            item_id = item["id"]

            data = await self.inv.update_acc(user, 0, name)
            if data[0] >= 1:
                x += 1
                em.add_field(
                    name=f"{name.upper()} - {data[0]}", value=f"ID: {item_id}", inline=False)

        em.set_author(name=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {user.name}", icon_url=user_av.url)
        if x == 1:
            em.description = "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç—ã..."

        await ctx.reply(embed=em, mention_author=False)

    @commands.command(aliases=["buy"], usage="<–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–ª–∏_id_–ø—Ä–µ–¥–º–µ—Ç–∞*: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ>")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def –∫—É–ø–∏—Ç—å(self, ctx, *, item_query: str):
        user = ctx.author
        if not ctx.guild:
            return await ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", mention_author=False)
        await self.bank.open_acc(user)
        await self.inv.open_acc(user)
        item_query_clean = item_query.strip().lower()
        item = None
        if item_query_clean.isdigit():
            item_id = int(item_query_clean)
            for it in self.inv.shop_items:
                if it["id"] == item_id:
                    item = it
                    break
        if not item:
            for it in self.inv.shop_items:
                if item_query_clean == it["name"].strip().lower():
                    item = it
                    break
        if not item:
            return await ctx.reply(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ id `{item_query}`", mention_author=False)
        if item["cost"] < 0:
            return await ctx.reply("–û—à–∏–±–∫–∞: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.", mention_author=False)
        users = await self.bank.get_acc(user)
        if users[1] < item["cost"]:
            return await ctx.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <:gold:1396929958965940286> –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {item['name']}", mention_author=False)
        try:
            await self.inv.update_acc(user, +1, item["name"])
            await self.bank.update_acc(user, -item["cost"])
        except Exception as e:
            return await ctx.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", mention_author=False)
        users = await self.bank.get_acc(user)
        buf = self.create_receipt_image(item["name"], item["cost"], user.name, balance=users[1])
        file = discord.File(buf, filename="receipt.png")
        await ctx.reply(file=file, mention_author=False)
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞ –≤ —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª
        forum_channel_id = 1396619305763733686
        forum_channel = ctx.guild.get_channel(forum_channel_id)
        if forum_channel and hasattr(forum_channel, 'create_thread'):
            thread_title = f"–ü–æ–∫—É–ø–∫–∞: {item['name']} ({user.name})"
            log_content = f"""
**–ü–û–ö–£–ü–ö–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']:,} <:gold:1396929958965940286>
üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {users[1]:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
            """
            try:
                thread = await forum_channel.create_thread(name=thread_title, content=log_content)
                view = PurchaseActionView(user.id, item["name"], item["cost"], self.client, self.inv, self.bank, thread)
                await thread.send(f"–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–∫—É–ø–∫–æ–π:", view=view)
            except Exception as e:
                await ctx.reply(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ –ø–æ–∫—É–ø–∫–∏: {e}", mention_author=False)
        else:
            try:
                log_content = f"""
**–ü–û–ö–£–ü–ö–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']:,} <:gold:1396929958965940286>
üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {users[1]:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
                """
                await forum_channel.send(log_content)
            except Exception as e:
                await ctx.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª: {e}", mention_author=False)
        # --- –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ ---
        role_ids = {
            "Shadow Fiend": 123456789012345678,
            "Necromancer": 123456789012345679,
            "Majority": 123456789012345680,
            "Royal Crown": 123456789012345681,
            "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å": 123456789012345682,
        }
        role_name = item["name"].split(' ', 1)[-1]
        if role_name in role_ids:
            guild = ctx.guild
            role = guild.get_role(role_ids[role_name])
            if role:
                try:
                    await user.add_roles(role, reason="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                    await ctx.reply(f"–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role.name}!", mention_author=False)
                except Exception as e:
                    await ctx.reply(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏: {e}", mention_author=False)
            else:
                await ctx.reply(f"–†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", mention_author=False)
        return

    @commands.command(aliases=["sell"], usage="<–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–ª–∏_id_–ø—Ä–µ–¥–º–µ—Ç–∞*: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ>")
    async def –ø—Ä–æ–¥–∞—Ç—å(self, ctx, *, item_query: str):
        user = ctx.author
        await self.bank.open_acc(user)
        await self.inv.open_acc(user)
        # –ü–æ–∏—Å–∫ –ø–æ id –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        item = None
        if item_query.isdigit():
            item_id = int(item_query)
            for it in self.inv.shop_items:
                if it["id"] == item_id:
                    item = it
                    break
        if not item:
            for it in self.inv.shop_items:
                if item_query.lower() == it["name"].lower():
                    item = it
                    break
        if not item:
            return await ctx.reply(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ id `{item_query}`", mention_author=False)
        quantity = await self.inv.update_acc(user, 0, item["name"])
        if quantity[0] < 1:
            return await ctx.reply(f"–£ –≤–∞—Å –Ω–µ—Ç {item['name']} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ", mention_author=False)
        cost = int(round(item["cost"] / 2, 0))
        await self.inv.update_acc(user, -1, item["name"])
        await self.bank.update_acc(user, +cost)
        
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª
        forum_channel_id = 1396619305763733686
        forum_channel = ctx.guild.get_channel(forum_channel_id)
        if forum_channel and hasattr(forum_channel, 'create_thread'):
            thread_title = f"–ü—Ä–æ–¥–∞–∂–∞: {item['name']} ({user.name})"
            log_content = f"""
**–ü–†–û–î–ê–ñ–ê –ü–†–ï–î–ú–ï–¢–ê**
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {user.mention}
üõí –ü—Ä–µ–¥–º–µ—Ç: **{item['name']}**
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {cost:,} <:gold:1396929958965940286>
‚è∞ –í—Ä–µ–º—è: <t:{int(datetime.utcnow().timestamp())}:f>
            """
            try:
                thread = await forum_channel.create_thread(name=thread_title, content=log_content)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
        
        return await ctx.reply(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {item['name']} –∑–∞ {cost:,} <:gold:1396929958965940286>", mention_author=False)

    @commands.command(usage="<@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <id_–ø—Ä–µ–¥–º–µ—Ç–∞>")
    @commands.has_permissions(administrator=True)
    async def —É–¥–∞–ª–∏—Ç—å(self, ctx, member: discord.Member, item_id: int):
        await self.inv.open_acc(member)
        # –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ id
        item = None
        for it in self.inv.shop_items:
            if it["id"] == item_id:
                item = it
                break
        if not item:
            return await ctx.reply(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å id `{item_id}`", mention_author=False)
        quantity = await self.inv.update_acc(member, 0, item["name"])
        if quantity[0] < 1:
            return await ctx.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç {item['name']} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ", mention_author=False)
        await self.inv.update_acc(member, -1, item["name"])
        await ctx.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —É–¥–∞–ª—ë–Ω 1 –ø—Ä–µ–¥–º–µ—Ç: {item['name']}", mention_author=False)


# if you are using 'discord.py >=v2.0' comment(remove) below code
# def setup(client):
#     client.add_cog(Inventory(client))

# if you are using 'discord.py >=v2.0' uncomment(add) below code
async def setup(client):
    await client.add_cog(Inventory(client))
